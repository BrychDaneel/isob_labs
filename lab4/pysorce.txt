"""
WSGI config for news2 project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "news2.settings")

application = get_wsgi_application()
"""news2 URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls')),
]

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
"""
Django settings for news2 project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cna=lum&x)09x)-9n-gf#_v2!24ct$d@9f4pz*0hc&g2y#5dv7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'news.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Minsk'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = '/media/'


EMAIL_HOST = 'smtp.mail.ru'
EMAIL_PORT = 2525
EMAIL_HOST_USER = "brychdaneel@mail.ru"
EMAIL_HOST_PASSWORD = "20DaNeEl07"
EMAIL_USE_TLS = True
#!/usr/bin/env python3
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "news.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
from django.db import models
from main.models.news import News
from django.contrib.auth.models import User

class Coments(models.Model):

    class Meta:
        db_table = 'comments'
        verbose_name = 'коментарий'
        verbose_name_plural = 'коментарии'
        ordering = ['pubtime']

    new = models.ForeignKey(News, editable=False, on_delete=models.CASCADE)

    user = models.ForeignKey(
                             User,
                             verbose_name='Пользователь',
                             editable=False,
                             on_delete=models.SET_NULL,
                             blank=True,
                             null=True
                            )

    text = models.TextField(verbose_name='Коментарий')

    pubtime = models.DateTimeField(
                                   auto_now_add=True,
                                   editable=False,
                                   verbose_name='Дата коментирования'
                                   )

    def __str__(self):
        return  '{} к новости "{}" ({:%d.%m.%Y %H:%M})'\
                .format(self.user, self.new, self.pubtime)
from django.db import models
from django.core.validators import FileExtensionValidator
from django.conf import settings
from PIL import Image
import os
import uuid
import datetime


IMAGE_W = 640
IMAGE_H = 360

def image_name():
    cfg = {}
    cfg['root'] = 'news'
    cfg['now'] = datetime.datetime.now()
    cfg['rnd'] = uuid.uuid4()
    cfg['ext'] = 'jpg'

    return  '{root}/{now:%Y/%m/%d}/{rnd}.{ext}'.format(**cfg)

class News(models.Model):

    class Meta:
        db_table = 'news'
        verbose_name = 'Новость'
        verbose_name_plural = 'Новости'
        ordering = ['-pubtime']

    title = models.CharField(max_length=50, verbose_name='Заголовок')

    image = models.ImageField(
                              upload_to='temp',
                              verbose_name='Изображение'
                             )

    short_text = models.TextField(verbose_name='Краткое описание')

    text = models.TextField(verbose_name='Тескт')

    pubtime = models.DateTimeField(
                                   auto_now_add=True,
                                   editable=False,
                                   verbose_name='Дата публикации'
                                   )

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if News.objects.filter(pk=self.pk).exists():
            try:
                this_record = News.objects.get(pk=self.pk)
                if this_record.image != self.image:
                    this_record.image.delete(save=False)
            except:
                print("WARNING: Can't delete file {}".format(thisself_record.image.path))

        super(News, self).save(*args, **kwargs)

        im = Image.open(self.image.path)
        im = im.resize((IMAGE_W, IMAGE_H))
        new_path = image_name()
        full_path = os.path.join(settings.MEDIA_ROOT, new_path)
        os.makedirs(os.path.split(full_path)[0], exist_ok=True)
        im.save(full_path)
        os.remove(self.image.path)

        self.image.name = new_path
        super(News, self).save(*args, **kwargs)
        print('ok')


    def delete(self, *args, **kwargs):
        try:
            this_record.image.delete(save=False)
        except:
            pass
        super(News, self).delete(*args, **kwargs)
from django.db import models
from django.contrib.auth.models import User
from uuid import uuid4

class EmailConfirm(models.Model):

    user = models.OneToOneField(User, on_delete=models.CASCADE)

    token = models.CharField(default=uuid4, max_length=36)
from main.models.news import News
from main.models.coments import Coments
from main.models.email_confirm import EmailConfirm
from django.contrib import admin

from main.models import News
from main.models import Coments

admin.site.register(News)
admin.site.register(Coments)
from django.views.generic.edit import CreateView
from main.models.news import News
from django.urls import reverse_lazy

class CreateNewView(CreateView):
    model = News
    fields = ['title', 'image', 'short_text', 'text']
    template_name = 'create.html'
    success_url = reverse_lazy('main')
from django.views.generic.base import View
from django.contrib.auth import logout
from django.shortcuts import redirect


class CustomLogoutView(View):

    def get(self, request, *args, **kwargs):
        logout(request)
        return redirect('main')
from django.views.generic.edit import FormView
from django.urls import reverse_lazy
from django.urls import reverse
from django.conf import settings
from django.contrib.auth.models import Group
from django.contrib.auth import logout

from main.forms import RegisterForm

from main.models import EmailConfirm


EMAIL_SUBJECT = 'Подтвердение почты'
EMAIL_TEXT = '{}'
DEFAULT_GROUP = 'User'

class CreateUserView(FormView):
    form_class = RegisterForm
    template_name = 'register.html'
    success_url = reverse_lazy('main')

    def form_valid(self, form, request):
        user = form.save(commit=False)
        user.is_active = False
        confirm = EmailConfirm()

        link = reverse('email.confirm', kwargs={'token' : confirm.token})
        url = request.build_absolute_uri(link)
        user.email_user(
                        EMAIL_SUBJECT,
                        EMAIL_TEXT.format(url),
                        from_email=settings.EMAIL_HOST_USER
                       )
        user.save()
        confirm.user = user
        group = Group.objects.get(name=DEFAULT_GROUP)
        user.groups.add(group)
        confirm.save()
        return super(CreateUserView, self).form_valid(form)

    def post(self, request, *args, **kwargs):
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        if form.is_valid():
            return self.form_valid(form, request)
        else:
            return self.form_invalid(form)

    def get(self, request, *args, **kwargs):
        logout(request)
        return super(CreateUserView, self).get(self, request, *args, **kwargs)
from django.views.generic.list import ListView

from main.models import News

class MainView(ListView):
    template_name = 'main.html'
    model = News
    context_object_name = 'news'
from django.views.generic.edit import DeleteView
from main.models import Coments
from django.urls import reverse

class DeleteComentView(DeleteView):
    model = Coments
    template_name = 'coments_confirm_delete.html'
    context_object_name = 'coment'

    def get_success_url(self):
        pk = self.get_object().new.pk
        return reverse('detail', kwargs={'pk' : pk})
from django.views.generic.base import TemplateView

from main.models import EmailConfirm


class EmailConfirmView(TemplateView):

    template_name = 'email_confirm.html'

    def get_context_data(self, token, **kwargs):
        context = super().get_context_data(**kwargs)

        confirm = EmailConfirm.objects.filter(token=token)
        exst = confirm.exists()
        context['valid'] = exst

        if exst:
            confirm = confirm.get()
            user = confirm.user
            user.is_active = True
            confirm.delete()
            user.save()

        return context
from django.views.generic.list import ListView

from django.contrib.auth.models import User

class UsersView(ListView):
    template_name = 'users.html'
    model = User
    context_object_name = 'users' 
from django.contrib.auth.views import LoginView
from django.contrib.auth import logout
from django.urls import reverse


class CustomLoginView(LoginView):

    template_name = 'login.html'

    def get(self, request, *args, **kwargs):
        logout(request)
        return super(CustomLoginView, self).get(self, request, *args, **kwargs)

    def get_success_url(self):
        return reverse('main')
from django.views.generic.edit import UpdateView
from main.models.news import News
from django.urls import reverse_lazy

class UpdateNewView(UpdateView):
    model = News
    fields = ['title', 'image', 'short_text', 'text']
    success_url = reverse_lazy('main')
    template_name = 'update.html'
from django.views.generic.detail import DetailView
from django.urls import reverse_lazy
from django.shortcuts import redirect
from datetime import timedelta
from datetime import datetime

from main.models import News
from main.models import Coments
from main.forms import ComentForm


COMMENT_TIME = timedelta(seconds=30)

class NewDetailView(DetailView):
    template_name = 'new.html'
    model = News
    context_object_name = 'new'
    login_url = reverse_lazy('login')

    form = None

    def get_context_data(self, **kwards):
        context = super(NewDetailView, self).get_context_data(**kwards)
        context['coment_form'] = self.form if self.form else ComentForm()
        context['coments'] = Coments.objects.filter(new=self.get_object())
        return context

    def post(self, request, *args, **kwargs):

        if not request.user.has_perm('main.add_coments'):
            return redirect(self.login_url)

        coment_form = ComentForm(request.POST)

        if not coment_form.is_valid():
            self.form = coment_form
            return super(NewDetailView, self).get(request, *args, **kwargs)

        coment = coment_form.save(commit=False)
        coment.user = request.user
        coment.new = self.get_object()

        if Coments.objects.filter(user=coment.user,
                                  pubtime__gte=datetime.now()-COMMENT_TIME
                                 ).exists():
            self.form = coment_form
            self.form.add_error('text', 
                                "Нельзя отправлять комментарии чаще 30 секунд"
                                )
            return super(NewDetailView, self).get(request, *args, **kwargs)

        coment.save()

        return super(NewDetailView, self).get(request, *args, **kwargs)
from django.views.generic.edit import DeleteView
from main.models.news import News
from django.urls import reverse_lazy

class DeleteNewView(DeleteView):
    model = News
    success_url = reverse_lazy('main')
    template_name = 'news_confirm_delete.html'
    context_object_name = 'new'
from main.views.main import MainView
from main.views.detail import NewDetailView
from main.views.create import CreateNewView
from main.views.delete import DeleteNewView
from main.views.update import UpdateNewView
from main.views.create_user import CreateUserView
from main.views.delete_coment import DeleteComentView
from main.views.users import UsersView
from main.views.email_confirm import EmailConfirmView
from main.views.login import CustomLoginView
from main.views.logout import CustomLogoutView
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.password_validation import MinimumLengthValidator
from django.contrib.auth.password_validation import UserAttributeSimilarityValidator
from django.contrib.auth.password_validation import CommonPasswordValidator
from django.contrib.auth.password_validation import NumericPasswordValidator

from django.utils.translation import gettext as _

class RegisterForm(forms.ModelForm):

    error_messages = {
        'password_mismatch': _("The two password fields didn't match."),
        'email_occupation' : 'Данный адрес почты уже используется',
    }

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email']


    def __init__(self, *args, **kwargs):
        super(RegisterForm, self).__init__(*args, **kwargs)
        for key in self.fields:
            self.fields[key].required = True

    password1 = forms.CharField(label=_("Password"),
            widget=forms.PasswordInput,
            validators=[
                        MinimumLengthValidator(min_length=8).validate,
                        UserAttributeSimilarityValidator().validate,
                        CommonPasswordValidator().validate,
                        NumericPasswordValidator().validate
                       ])

    password2 = forms.CharField(label=_("Password confirmation"),
        widget=forms.PasswordInput,
        help_text=_("Enter the same password as above, for verification.")
        )

    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError(
                self.error_messages['password_mismatch'],
                code='password_mismatch',
            )
        return password2

    def clean_email(self, *args, **kwargs):
        email = self.cleaned_data.get("email")
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError(
                self.error_messages['email_occupation'],
                code='email_occupation',
            )
        return email

    def save(self, commit=True):
        user = super(RegisterForm, self).save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()

        return user
from django.forms import ModelForm
from main.models import Coments

class ComentForm(ModelForm):
    class Meta:
        model = Coments
        fields = ['text']
from main.forms.coment import ComentForm
from main.forms.register import RegisterForm
from django.conf.urls import url

from django.contrib.auth.decorators import permission_required
from django.urls import reverse_lazy

from main.views import MainView
from main.views import NewDetailView
from main.views import CreateNewView
from main.views import DeleteNewView
from main.views import UpdateNewView
from main.views import CreateUserView
from main.views import DeleteComentView
from main.views import UsersView
from main.views import EmailConfirmView
from main.views import CustomLoginView
from main.views import CustomLogoutView


login_url = reverse_lazy('login')


urlpatterns = [
    url(r'^$', MainView.as_view(), name='main'),

    url(r'^new/(?P<pk>\d+)/$', NewDetailView.as_view(), name='detail'),

    url(r'^new/add', 
        permission_required('main.add_news', login_url=login_url)(CreateNewView.as_view()),
        name='new.add'),

    url(r'^new/(?P<pk>\d+)/delete/$', 
        permission_required('main.delete_news', login_url=login_url)(DeleteNewView.as_view()), name='new.delete'),

    url(r'^new/(?P<pk>\d+)/update/$', 
        permission_required('main.change_news', login_url=login_url)(UpdateNewView.as_view()),
        name='new.update'),

    url(r'^login/$', CustomLoginView.as_view(), name='login'),

    url(r'^logout/$', CustomLogoutView.as_view(), name='logout'),

    url(r'^register/$', CreateUserView.as_view(), name='register'),

    url(
        r'^comments/delete/(?P<pk>\d+)$',
        permission_required('main.delete_coments', login_url=login_url)(DeleteComentView.as_view()),
        name='coment.delete'
       ),

    url(r'^users/$', UsersView.as_view(), name='users'),

    url(r'^users/confirm/(?P<token>'
        r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
        r')$',
        EmailConfirmView.as_view(),
        name='email.confirm'),
]
from django.test import TestCase

# Create your tests here.
